@page "/admin/users"
@using DiscordSecretSanta.Core.ViewModels.AdminUsers
@using DiscordSecretSanta.Core.ViewModels
@using FluentValidation
@using DiscordSecretSanta.Core.Validators
@using DiscordSecretSanta.Core.AssignSecretSantas
@inject IAdminUsersViewHandler ViewModelHandler
@inject IAssignSecretSantas AssignSecretSantas
@inject IStringLocalizer<UsersPageResources> Translate
@inject INotificationService NotificationService

@if (_viewModel is null)
{
    <h1>Not loaded</h1>
}
else
{
    if (_viewModel.Authorised == false)
    {
        <AlertBlock Message="@Translate["NotAuthorised"]" />
    }
    else
    {
        <PageTitle>@Translate["PageTitle"]</PageTitle>
        
        <Modal @ref="_modalRef">
            @if (_currentUser is not null)
            {
                <ModalContent Centered>
                    <ModalHeader Background="Background.Light">
                        <ModalTitle>Edit User: @_currentUser.Name</ModalTitle>
                        <CloseButton/>
                    </ModalHeader>
                    <ModalBody Background="Background.Light">
                        <EditField 
                            Label="@Translate["Wishlist URL"]"
                            Value="@_currentUser.WishlistUrl"
                            OnSubmit="@(async (value) => await OnWishlistSubmit(value))"
                            ModalTitle="@Translate["Edit Wishlist URL"]"
                            Validator="@ValidateWishlist"
                            Class="mb-2"
                        />
                        @if (!string.IsNullOrWhiteSpace(_currentUser.WishlistUrl))
                        {
                            <FullWidthButton
                                Color="Color.Info">
                                @Translate["View Wishlist"]
                            </FullWidthButton>
                        }
                        
                        @if (_currentUser.IsAdmin == false)
                        {
                            <FullWidthButton
                                Clicked="@(async () => await MakeUserAdmin())">
                                @Translate["Make Admin"]
                            </FullWidthButton>
                        }
                        else
                        {
                            <FullWidthButton
                                Clicked="@(async () => await RemoveUserAdmin())"
                                Color="Color.Danger">
                                @Translate["Remove Admin"]
                            </FullWidthButton>
                        }
                        
                        @if (!_showSecretSanta)
                        {
                            <FullWidthButton
                                Clicked="@ShowSecretSanta">
                                @Translate["Show Secret Santa"]
                            </FullWidthButton>
                        }
                        else
                        {
                            @if (_buyingFor is not null)
                            {
                                <div class="mb-2">
                                    <Header HeadingType="Header.HeaderType.MainHeader">@Translate["Is Buying For"]</Header>
                                    <SecretSantaView User="@_buyingFor"/>
                                </div>
                            }
                            
                            @if (_beingBoughtBy is not null)
                            {
                                <div class="mb-2">
                                    <Header HeadingType="Header.HeaderType.MainHeader">@Translate["Is being bought for by"]</Header>
                                    <SecretSantaView User="@_beingBoughtBy"/>
                                </div>
                            }
                        }
                    </ModalBody>
                </ModalContent>
            }
        </Modal>

        <CenterBlock Title="@Translate["PageTitle"]">
            <AlertBlock Message="@Translate[_viewModel.ErrorMessage]"></AlertBlock>
            
            @foreach (var user in _viewModel.Users)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is9">
                        <DiscordBlock User="@user"/>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <SimpleButton
                            Color="Color.Primary"
                            Clicked="@(() => UserOptionsClicked(user))">
                            @Translate["UserOptions"]
                        </SimpleButton>
                    </Column>
                </Row>
            }

            <Header HeadingType="Header.HeaderType.AdminHeader">
                @Translate["Actions"]
            </Header>
            <SimpleButton
                Clicked="@(async () => await AssignSecretSanta())">
                @Translate["Assign Secret Santa"]
            </SimpleButton>
        </CenterBlock>
    }
}

@code {

    Modal _modalRef;
    AdminUsersViewModel _viewModel = null;
    UserViewModel _currentUser = null;
    UserViewModel _buyingFor = null;
    UserViewModel _beingBoughtBy = null;
    bool _showSecretSanta = false;
    readonly IValidator<string> _wishlistValidator = new WishlistUrlValidator();

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await ViewModelHandler.OnInitAsync(CancellationToken.None);
    }

    private void UserOptionsClicked(UserViewModel user)
    {
        _currentUser = user;
        _showSecretSanta = false;

        _buyingFor = _viewModel.Users
            .FirstOrDefault(x => x.UserId == user.SecretSantaUserId);
        
        _beingBoughtBy = _viewModel.Users
            .FirstOrDefault(x => x.SecretSantaUserId == user.UserId);
        
        _modalRef.Show();
    }

    async Task AssignSecretSanta()
    {
        var result = await AssignSecretSantas.Run(CancellationToken.None);
        if (result.IsSuccess)
        {
            await NotificationService.Success(Translate["Secret Santas assigned"]);
            _viewModel = await ViewModelHandler.OnInitAsync(CancellationToken.None);
        }
        else
        {
            await NotificationService.Error(result.Error);
            _viewModel.ErrorMessage = result.Error;
        }
    }

    async Task MakeUserAdmin()
    {
        if (_currentUser is null)
            return;
        
        _viewModel = await ViewModelHandler.MakeUserAdmin(_viewModel, new UserId(_currentUser.UserId), CancellationToken.None);
        await NotificationService.Success($"{_currentUser.Name} {Translate["is now an admin"]}");
    }
    
    async Task RemoveUserAdmin()
    {
        if (_currentUser is null)
            return;
        
        _viewModel = await ViewModelHandler.RemoveUserAdmin(_viewModel, new UserId(_currentUser.UserId), CancellationToken.None);
        await NotificationService.Success($"{_currentUser.Name} {Translate["is no longer an admin"]}");
    }
    
    async Task OnWishlistSubmit(string wishlistUrl)
    {
        if (_currentUser is null)
            return;
        
        _viewModel = await ViewModelHandler.SetUserWishlistUrl(_viewModel, new UserId(_currentUser.UserId), wishlistUrl, CancellationToken.None);
        await NotificationService.Success($"{_currentUser.Name} {Translate["wishlist is updated"]}");
    }

    void ShowSecretSanta()
    {
        _showSecretSanta = true;
    }
    
    void ValidateWishlist(ValidatorEventArgs e)
    {
        var result = _wishlistValidator.Validate(e.Value.ToString());
        if (result.IsValid)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = result.Errors.First().ErrorMessage;
        }
    }
}