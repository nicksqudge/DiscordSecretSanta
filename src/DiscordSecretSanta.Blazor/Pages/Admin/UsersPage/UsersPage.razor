@page "/admin/users"
@using DiscordSecretSanta.Core.ViewModels.AdminUsers
@using DiscordSecretSanta.Core.ViewModels
@inject IAdminUsersViewHandler ViewModelHandler
@inject IStringLocalizer<UsersPageResources> Translate
@inject IModalService ModalService

@if (_viewModel is null)
{
    <h1>Not loaded</h1>
}
else
{
    if (_viewModel.Authorised == false)
    {
        <AlertBlock Message="@Translate["NotAuthorised"]" />
    }
    else
    {
        <PageTitle>@Translate["PageTitle"]</PageTitle>

        <CenterBlock>
            @foreach (var user in _viewModel.Users)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is9">
                        <DiscordBlock User="@user"/>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <SimpleButton 
                            Color="Color.Primary"
                            Clicked="@(() => UserOptionsClicked(user))"
                        >@Translate["UserOptions"]</SimpleButton>
                    </Column>
                </Row>
            }
        </CenterBlock>
    }
}

@code {

    AdminUsersViewModel _viewModel = null;

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await ViewModelHandler.OnInitAsync(CancellationToken.None);
    }

    private void UserOptionsClicked(UserViewModel user)
    {
        var option = new UserOptionsModel()
        {
            WishlistUrl = user.WishlistUrl,
            UserId = user.UserId,
            IsAdmin = user.IsAdmin,
            Name = user.Name,
            HasWishlist = !string.IsNullOrWhiteSpace(user.WishlistUrl)
        };
        
        ModalService.Show<UserOptionsModal>(x =>
            {
                x.Add(z => z.Model, option);   
            }, 
            new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true
            }
        );
    }
}