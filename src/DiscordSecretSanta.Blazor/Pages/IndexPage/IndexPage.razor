@page "/"
@using DiscordSecretSanta.Core.Validators
@using DiscordSecretSanta.Blazor.Pages.IndexPage.Components
@using FluentValidation
@inject IUserLoginViewHandler ViewModelHandler
@inject NavigationManager NavigationManager
@inject IStringLocalizer<IndexPageResources> Translate
@inject IJSRuntime Javascript
@inject IModalService ModalService

@if (_viewModel is null)
{
    <h1>Not loaded</h1>
}
else
{
    <PageTitle>@_viewModel.Title</PageTitle>
    
    <CenterBlock Title="@_viewModel.Title">
        <AlertBlock
            Message="@_viewModel.ErrorMessage"
        />
        @if (_viewModel.HasUser == false)
        {
            <FullWidthButton Clicked="@ClickSignInButton">@Translate["SignInButtonText"]</FullWidthButton>
        }
        else
        {
            <DiscordBlock User="@_viewModel.User"/>

            <EditField
                Label="@Translate["WishlistUrl"]"
                Value="@_viewModel.User.WishlistUrl"
                OnSubmit="@(async (value) => await OnWishlistSubmit(value))"
                ModalTitle="@Translate["WishlistUrlHeader"]"
                Validator="@ValidateWishlist"/>
        }
        
        @if (ShowSecretSanta == false)
        {
            <Alert Color="Color.Info">
                <AlertMessage>@Translate["Secret Santa has not been assigned yet"]</AlertMessage>
            </Alert>
        }
    </CenterBlock>

    @if (ShowSecretSanta)
    {
        <Row>
            @if (_viewModel.PersonBuyingForThem is not null)
            {
                <Column ColumnSize="ColumnSize.Is6">
                    <YourSecretSanta 
                        User="@_viewModel.SecretSanta"
                        Status="@_viewModel.User!.SecretSantaStatus"
                        OnPostedClicked="@UpdateSecretSantaStatus"
                        ViewTheirWishlist="@ViewTheirWishlist"
                    />
                </Column>
            }
            
            @if (_viewModel.PersonBuyingForThem is not null)
            {
                <Column ColumnSize="ColumnSize.Is6">
                    <YourGift 
                        Status="@_viewModel.PersonBuyingForThem"
                        SetGiftAsDelivered="@SetMyGiftAsDelivered"
                    />
                </Column>
            }
        </Row>
    }

    @if (_viewModel.HasUser)
    {
        <Buttons>
            @if (CanViewAdminActions)
            {
                <SimpleButton
                    Clicked="GoToAdminUsers"
                    Color="Color.Success">
                    @Translate["ViewUsers"]
                </SimpleButton>
            }
            <SimpleButton Clicked="Logout">@Translate["Logout"]</SimpleButton>
        </Buttons>
    }
}

@code {

    UserLoginViewModel _viewModel = null;
    readonly IValidator<string> _wishlistValidator = new WishlistUrlValidator();
    bool CanViewAdminActions => _viewModel is not null && _viewModel.HasUser && _viewModel.User!.IsAdmin;
    bool ShowSecretSanta => _viewModel.HasUser &&
                            (
                                _viewModel?.User?.SecretSantaStatus == SecretSantaStatus.Unassigned || 
                                _viewModel?.SecretSanta is null || 
                                _viewModel.PersonBuyingForThem is not null
                            );

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await ViewModelHandler.OnInitAsync(CancellationToken.None);
    }

    void ClickSignInButton()
    {
        NavigationManager.NavigateTo("/Account/Login", true);
    }

    void GoToAdminUsers()
    {
        NavigationManager.NavigateTo("/admin/users");
    }

    void Logout()
    {
        NavigationManager.NavigateTo("/Account/Logout", true);
    }

    async Task ViewTheirWishlist()
    {
        await Javascript.InvokeAsync<object>("open", CancellationToken.None, _viewModel.SecretSanta!.WishlistUrl.ToString());
    }

    async Task OnWishlistSubmit(string wishlistUrl)
    {
        _viewModel = await ViewModelHandler.SetWishlistUrl(_viewModel, wishlistUrl, CancellationToken.None);
    }

    async Task UpdateSecretSantaStatus(SecretSantaStatus status)
    {
        _viewModel = await ViewModelHandler.SetSecretSantaStatus(_viewModel, status, CancellationToken.None);
    }

    async Task SetMyGiftAsDelivered()
    {
        _viewModel = await ViewModelHandler.SetMyGiftStatus(_viewModel, SecretSantaStatus.Arrived, CancellationToken.None);
    }

    void ValidateWishlist(ValidatorEventArgs e)
    {
        var result = _wishlistValidator.Validate(e.Value.ToString());
        if (result.IsValid)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = result.Errors.First().ErrorMessage;
        }
    }
}