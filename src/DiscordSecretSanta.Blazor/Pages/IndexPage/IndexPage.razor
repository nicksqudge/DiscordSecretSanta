@page "/"
@using DiscordSecretSanta.Core.Validators
@using FluentValidation
@inject IUserLoginViewHandler ViewModelHandler
@inject NavigationManager NavigationManager
@inject IStringLocalizer<IndexPageResources> Translate

@if (_viewModel is null)
{
    <h1>Not loaded</h1>
}
else
{
    <PageTitle>@_viewModel.Title</PageTitle>
    
    <CenterBlock Title="@_viewModel.Title">
        <AlertBlock
            Message="@_viewModel.ErrorMessage"
        />
        @if (_viewModel.HasUser == false)
        {
            <FullWidthButton Clicked="@ClickSignInButton">@Translate["SignInButtonText"]</FullWidthButton>
        }
        else
        {
            <DiscordBlock User="@_viewModel.User" />
            
            <EditField 
                Label="@Translate["WishlistUrl"]"
                Value="@_viewModel.User.WishlistUrl"
                OnSubmit="@(async (value) => await OnWishlistSubmit(value))"
                ModalTitle="@Translate["WishlistUrlHeader"]"
                Validator="@ValidateWishlist"
            />
            
            @if (_canViewAdminActions)
            {
                <div class="my-5">
                    <Heading
                        Size="HeadingSize.Is6"
                        TextColor="TextColor.Success"
                    >@Translate["AdminHeading"]</Heading>
                    <SimpleButton
                        Clicked="GoToAdminUsers"
                        Color="Color.Success"
                    >@Translate["ViewUsers"]</SimpleButton>
                </div>
            }
            
            <SimpleButton Clicked="Logout">@Translate["Logout"]</SimpleButton>
        }
    </CenterBlock>
}

@code {

    UserLoginViewModel _viewModel = null;
    IValidator<string> _wishlistValidator = new WishlistUrlValidator();
    bool _canViewAdminActions => _viewModel is not null && _viewModel.HasUser && _viewModel.User!.IsAdmin;

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await ViewModelHandler.OnInitAsync(CancellationToken.None);
    }

    void ClickSignInButton()
    {
        NavigationManager.NavigateTo("/Account/Login", true);
    }

    void GoToAdminUsers()
    {
        NavigationManager.NavigateTo("/admin/users");
    }

    void Logout()
    {
        NavigationManager.NavigateTo("/Account/Logout", true);
    }

    async Task OnWishlistSubmit(string wishlistUrl)
    {
        _viewModel = await ViewModelHandler.SetWishlistUrl(wishlistUrl, CancellationToken.None);
    }

    void ValidateWishlist(ValidatorEventArgs e)
    {
        var result = _wishlistValidator.Validate(e.Value.ToString());
        if (result.IsValid)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = result.Errors.First().ErrorMessage;
        }
    }
}