@page "/"
@using DiscordSecretSanta.Core.Validators
@using FluentValidation
@inject IUserLoginViewHandler ViewModelHandler
@inject NavigationManager NavigationManager
@inject IStringLocalizer<IndexPageResources> Translate

@if (_viewModel is null)
{
    <h1>Not loaded</h1>
}
else
{
    <PageTitle>@_viewModel.Title</PageTitle>
    
    <CenterBlock>
        <AlertBlock
            Message="@_viewModel.ErrorMessage"
        />
        @if (_viewModel.HasUser == false)
        {
            <Heading 
                Size="HeadingSize.Is5"
                TextColor="TextColor.White"
                TextAlignment="TextAlignment.Center"
                Class="mb-3"
            >@_viewModel.Title</Heading>
            
            <FullWidthButton Clicked="@ClickSignInButton">@Translate["SignInButtonText"]</FullWidthButton>
        }
        else
        {
            <DiscordBlock
                Avatar="@_viewModel.User!.AvatarId"
                Name="@_viewModel.User.Name"
                TagId="@_viewModel.User.DiscordTagId"
                UserId="@_viewModel.User.UserId"
            />
            
            <EditField 
                Label="@Translate["WishlistUrl"]"
                Value="@_viewModel.User.WishlistUrl"
                OnSubmit="@(async (value) => await OnWishlistSubmit(value))"
                ModalTitle="@Translate["WishlistUrlHeader"]"
                Validator="@ValidateWishlist"
            />
            <a href="/Account/Logout">Logout</a>
        }
    </CenterBlock>
}

@code {

    UserLoginViewModel? _viewModel = null;
    private string LoginUrl = "/Account/Login";
    private IValidator<string> WishlistValidator = new WishlistUrlValidator();

    protected override async Task OnInitializedAsync()
    {
        _viewModel = await ViewModelHandler.OnInitAsync(CancellationToken.None);
    }

    void ClickSignInButton()
    {
        NavigationManager.NavigateTo(LoginUrl, true);
    }

    async Task OnWishlistSubmit(string wishlistUrl)
    {
        _viewModel = await ViewModelHandler.SetWishlistUrl(wishlistUrl, CancellationToken.None);
    }

    void ValidateWishlist(ValidatorEventArgs e)
    {
        var result = WishlistValidator.Validate(e.Value.ToString());
        if (result.IsValid)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = result.Errors.First().ErrorMessage;
        }
    }
}